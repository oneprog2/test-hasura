SET check_function_bodies = false;
CREATE DOMAIN public.url AS text
	CONSTRAINT url_check CHECK ((VALUE ~ 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)'::text));
COMMENT ON DOMAIN public.url IS 'Match URLs (http or https)';
CREATE FUNCTION public.gen_order_total() RETURNS trigger
    LANGUAGE plpgsql STABLE
    AS $$
DECLARE
    sumtotal numeric;
BEGIN
    SELECT
        TRUNC(SUM(p.price), 2) INTO STRICT sumtotal
    FROM
        public.order o
        INNER JOIN public.order_product op ON (o.id = op.order_id)
        INNER JOIN public.product p ON (op.product_id = p.id)
    WHERE
        o.id = OLD.id
    GROUP BY
        o.id;
    NEW.order_total := sumtotal;
    RETURN NEW;
EXCEPTION
    WHEN no_data_found THEN
        RAISE NOTICE 'No products found for %', OLD.id;
    RETURN NEW;
END;
$$;
CREATE FUNCTION public.set_current_timestamp_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new. "updated_at" = NOW();
  RETURN _new;
END;
$$;
CREATE TABLE public.address (
    id integer NOT NULL,
    name text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id integer NOT NULL,
    city text NOT NULL,
    state text NOT NULL,
    zipcode text NOT NULL,
    address_line_one text NOT NULL,
    address_line_two text
);
COMMENT ON TABLE public.address IS 'A physical billing/shipping address, attached to a user account';
ALTER TABLE public.address ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.address_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE public."order" (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id integer NOT NULL,
    billing_address_id integer NOT NULL,
    shipping_address_id integer NOT NULL,
    is_shipped boolean DEFAULT false NOT NULL,
    order_total numeric,
    status text DEFAULT 'CREATED'::text NOT NULL
);
COMMENT ON TABLE public."order" IS 'An order from a customer, containing one or more products and quantities';
ALTER TABLE public."order" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.order_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE public.order_product (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    order_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL
);
COMMENT ON TABLE public.order_product IS 'A product belonging to a customer order, along with a quantity';
ALTER TABLE public.order_product ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.order_product_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE public.order_status (
    status text NOT NULL
);
CREATE TABLE public.product (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    category_display_name text NOT NULL,
    brand text,
    price numeric NOT NULL,
    image_urls jsonb
);
CREATE TABLE public.product_category_enum (
    name text NOT NULL,
    display_name text NOT NULL
);
ALTER TABLE public.product ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.product_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE public.product_review (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id integer NOT NULL,
    product_id integer NOT NULL,
    rating integer NOT NULL,
    comment text NOT NULL,
    CONSTRAINT product_review_comment_check CHECK ((char_length(comment) <= 5000)),
    CONSTRAINT product_review_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);
COMMENT ON TABLE public.product_review IS 'A review for a product which a customer has purchased before';
ALTER TABLE public.product_review ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.product_review_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE public.site_admin (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    refresh_token text
);
COMMENT ON TABLE public.site_admin IS 'Someone administrative capabilities on the site';
COMMENT ON COLUMN public.site_admin.password IS 'A bcrypt-hashed version of the admin password, compared against securely in the JWT Auth API handler for sign-in';
ALTER TABLE public.site_admin ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.site_admin_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE public."user" (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    refresh_token text
);
COMMENT ON TABLE public."user" IS 'Someone with an account on the site, who uses it to make purchases';
COMMENT ON COLUMN public."user".password IS 'A bcrypt-hashed version of the user password, compared against securely in the JWT Auth API handler for sign-in';
ALTER TABLE public."user" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
ALTER TABLE ONLY public.address
    ADD CONSTRAINT address_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.product_review
    ADD CONSTRAINT one_review_per_person_and_product UNIQUE (user_id, product_id);
ALTER TABLE ONLY public."order"
    ADD CONSTRAINT order_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.order_product
    ADD CONSTRAINT order_product_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.order_status
    ADD CONSTRAINT order_status_pkey PRIMARY KEY (status);
ALTER TABLE ONLY public.product_category_enum
    ADD CONSTRAINT product_category_enum_display_name_key UNIQUE (display_name);
ALTER TABLE ONLY public.product_category_enum
    ADD CONSTRAINT product_category_enum_pkey PRIMARY KEY (name);
ALTER TABLE ONLY public.product
    ADD CONSTRAINT product_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.product_review
    ADD CONSTRAINT product_review_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.site_admin
    ADD CONSTRAINT site_admin_email_key UNIQUE (email);
ALTER TABLE ONLY public.site_admin
    ADD CONSTRAINT site_admin_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.site_admin
    ADD CONSTRAINT site_admin_refresh_token_key UNIQUE (refresh_token);
ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_email_key UNIQUE (email);
ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_refresh_token_key UNIQUE (refresh_token);
CREATE TRIGGER set_address_updated_at BEFORE UPDATE ON public.address FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_order_product_updated_at BEFORE UPDATE ON public.order_product FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_order_updated_at BEFORE UPDATE ON public."order" FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_product_review_updated_at BEFORE UPDATE ON public.product_review FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_product_updated_at BEFORE UPDATE ON public.product FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_site_admin_updated_at BEFORE UPDATE ON public.site_admin FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_user_updated_at BEFORE UPDATE ON public."user" FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER sum_order BEFORE INSERT OR UPDATE ON public."order" FOR EACH ROW EXECUTE FUNCTION public.gen_order_total();
ALTER TABLE ONLY public.address
    ADD CONSTRAINT address_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);
ALTER TABLE ONLY public.product
    ADD CONSTRAINT category_display_name_fk FOREIGN KEY (category_display_name) REFERENCES public.product_category_enum(display_name);
ALTER TABLE ONLY public."order"
    ADD CONSTRAINT order_billing_address_id_fkey FOREIGN KEY (billing_address_id) REFERENCES public.address(id);
ALTER TABLE ONLY public.order_product
    ADD CONSTRAINT order_id_fkey FOREIGN KEY (order_id) REFERENCES public."order"(id);
ALTER TABLE ONLY public."order"
    ADD CONSTRAINT order_shipping_address_id_fkey FOREIGN KEY (shipping_address_id) REFERENCES public.address(id);
ALTER TABLE ONLY public."order"
    ADD CONSTRAINT order_status_fkey FOREIGN KEY (status) REFERENCES public.order_status(status);
ALTER TABLE ONLY public."order"
    ADD CONSTRAINT order_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);
ALTER TABLE ONLY public.order_product
    ADD CONSTRAINT product_id_fkey FOREIGN KEY (product_id) REFERENCES public.product(id);
ALTER TABLE ONLY public.product_review
    ADD CONSTRAINT product_id_fkey FOREIGN KEY (product_id) REFERENCES public.product(id);
ALTER TABLE ONLY public.product_review
    ADD CONSTRAINT user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);
